package jpp.qrcode.decode;

import jpp.qrcode.DataBlock;
import jpp.qrcode.ErrorCorrectionInformation;
import jpp.qrcode.reedsolomon.ReedSolomon;
import jpp.qrcode.reedsolomon.ReedSolomonException;

public class DataDestructurer {
	static int n;
	public static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation errorCorrectionInformation) throws QRDecodeException {
		try {
			n = 0;
			for (DataBlock block: blocks){
				ReedSolomon.correct(block.dataBytes(),block.correctionBytes());
				n++;
			}
		}catch (Exception e){
			throw new QRDecodeException("Fehler beim Dekodieren von Block" + n);
		}

		byte[] res = new byte[errorCorrectionInformation.totalDataByteCount()];
		int index = 0;
		for (DataBlock block: blocks){
			for (byte info: block.dataBytes()){
				res[index] = info;
				index++;
			}
		}
		return res;
	}
	
	public static DataBlock[] deinterleave(byte[] data, ErrorCorrectionInformation errorCorrectionInformation) {
	    if (data == null || data.length == 0){
	        throw new IllegalArgumentException("data in deinterleave is empty ");
        }
		int anzahlBloecke = errorCorrectionInformation.totalBlockCount();
		DataBlock[] result = new DataBlock[data.length/anzahlBloecke];
		int index = 0;
		for (int i = 0; i < anzahlBloecke; i++) {
			byte[] blockData = new byte[data.length/anzahlBloecke];
			for (int j = 0; j < data.length/anzahlBloecke; j++) {
                blockData[j] = data[index];
			}
			byte[] correctionBytes= ReedSolomon.calculateCorrectionBytes(blockData,errorCorrectionInformation.correctionBytesPerBlock());
			DataBlock dataBlock = new DataBlock(blockData,correctionBytes);
			result[i] = dataBlock;
		}
		return result;
	}
	
	public static byte[] destructure(byte[] data, ErrorCorrectionInformation ecBlocks){
		if (data.length != ecBlocks.totalDataByteCount()){
		    throw new IllegalArgumentException("anzhal der Bytes ungleich der Bytes in data");
        }
		DataBlock[] dataBlocks = deinterleave(data,ecBlocks);
		byte[] res = join(dataBlocks,ecBlocks);
		return res;
	}
}
