package jpp.qrcode;

import jpp.qrcode.decode.DataDestructurer;
import jpp.qrcode.decode.DataExtractor;
import jpp.qrcode.io.TextReader;
import jpp.qrcode.io.TextWriter;
import jpp.qrcode.reedsolomon.ReedSolomonException;

import java.io.*;
import java.util.Arrays;

public class main {
    public static void main(String[] args) throws IOException, ReedSolomonException {
        int[][] matrix = {
                {1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1},
                {1,0,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1},
                {1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,0,1},
                {1,0,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1},
                {1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
                {0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0},
                {0,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0},
                {1,1,0,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1},
                {1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1},
                {1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,0,1,0,0,0},
                {1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0},
                {1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0},
                {0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0},
                {0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0},
                {1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0},
                {0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1},
                {0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0},
                {0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0},
                {0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,0},
                {1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1},
                {0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1},
                {0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1},
                {1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,0,0,1},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1,0},
                {1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,0,1,0,0,0,0},
                {1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0},
                {1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0},
                {1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1},
                {1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
                {1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1},
                {1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0}};


//        boolean[][] data = Helper.integerArray2booleanArray(matrix);
//        for (int i = 0; i < data.length; i++) {
//            System.out.println(Arrays.toString(data[i]));
//        }
//        QRCode qrCode = QRCode.createValidatedFromBooleans(data);
//        Version version = qrCode.version();
//        ErrorCorrection errorCorrection = qrCode.errorCorrection();
//        MaskPattern maskPattern = qrCode.maskPattern();
//        ErrorCorrectionInformation errorCorrectionInformation = version.correctionInformationFor(errorCorrection);
//        int byteCount = errorCorrectionInformation.totalByteCount();
//        ReservedModulesMask reservedModulesMask = ReservedModulesMask.forVersion(version);




        //Test_DataPositions
//        ReservedModulesMask reservedModulesMask = ReservedModulesMask.forVersion(Version.fromNumber(1));
//        boolean[][] testMask = new boolean[reservedModulesMask.size()][reservedModulesMask.size()];
//        for (int i = 0; i < testMask.length; i++) {
//            for (int j = 0; j < testMask.length; j++) {
//                testMask[i][j] = reservedModulesMask.isReserved(i,j);
//            }
//        }
//
//        int[][] testArray = Helper.booleanArray2integerArray(testMask);
//        DataPositions dataPositions = new DataPositions(reservedModulesMask);
//        int n = 1;
//        for (int i = 0; i < reservedModulesMask.size(); i++) {
//            for (int j = 0; j < reservedModulesMask.size(); j++) {
//                if (dataPositions.next()){
////                    testArray[dataPositions.i()][dataPositions.j()] = "[i: " + dataPositions.i() + ",j: " + dataPositions.j() + "]";
//                        testArray[dataPositions.i()][dataPositions.j()] = n++;
//                }
//            }
//        }
//        for (int i = 0; i < testArray.length; i++) {
//            for (int j = 0; j < testArray[i].length; j++) {
//                if (testArray[i][j] < 10){
//                    System.out.print("   " + testArray[i][j]);
//                } else if (testArray[i][j] < 100){
//                    System.out.print("  " + testArray[i][j]);
//                }else {
//                    System.out.print(" " + testArray[i][j]);
//                }
//            }
//            System.out.println();
//        }

//    //Test TextReader
//        File file = new File("examples/invalid/noBottomLeftCorner.txt");
//        InputStream in = new FileInputStream(file);
//        boolean[][] boo = TextReader.read(in);
//        int[][] data = Helper.booleanArray2integerArray(boo);
//        for (int i = 0; i < data.length; i++) {
//            System.out.println(Arrays.toString(data[i]));
//        }
//      //Test DataExtractor
//        byte[] information = DataExtractor.extract(data,reservedModulesMask,byteCount);
//        StringBuilder temp = new StringBuilder();
//        int index = 0;
//        for (byte info: information){
//            for (int i = 0; i < 8; i++) {
//                index = (byte) ((1 << i) & info);
//                if (index == 0){
//                    temp.append(0);
//                }
//                else {
//                    temp.append(1);
//                }
//            }
//            temp.append("\n\n");
//        }
//        System.out.println(temp);

      //Test TextReader
//        try {
//            FileOutputStream f = null;
//            f = new FileOutputStream("examples/TestTextWrite.txt");
//            File f2=new File("examples/invalid/damagedVersionInformationTwice.txt");
//            FileInputStream fileReader= new FileInputStream(f2);
//            boolean[][] test = TextReader.read(fileReader);
//            TextWriter.write(f,test);
//        } catch (IOException e) {
//            System.out.println("Datei konnte nicht erstellt werden! (TestTextWriter)");
//        }
      //Test DataDestructure only one Group
//        byte[] information = DataExtractor.extract(data,reservedModulesMask,byteCount);
//        DataBlock[] dataBlocks = DataDestructurer.deinterleave(information,errorCorrectionInformation);
      //Test DataDestructure 2Groups
        File f=new File("examples/WueCampus_H.txt");
//        try{
            FileInputStream fileReader= new FileInputStream(f);
            boolean[][] booleans = TextReader.read(fileReader);
            ErrorCorrection errorCorrection = ErrorCorrection.HIGH;
            QRCode qrcode = QRCode.createValidatedFromBooleans(booleans);
            ErrorCorrectionInformation errorCorrectionInformation = qrcode.version().correctionInformationFor(errorCorrection);
            byte[] data= DataExtractor.extract(booleans, ReservedModulesMask.forVersion(qrcode.version()),qrcode.version().totalByteCount());
            DataBlock[] dataBlocks = null;

            byte[] result = testdestructure( data,  errorCorrectionInformation);
            dataBlocks=testDeinterleave(result,errorCorrectionInformation);
            result = join(dataBlocks,errorCorrectionInformation);
            System.out.println(Arrays.toString(result));
//        }catch (Exception e){
//            System.out.println(e.toString());
//            System.out.println(false);
//        }

    }
    private static byte[] testdestructure(byte[] data, ErrorCorrectionInformation correctionInformation) throws ReedSolomonException {
        return DataDestructurer.destructure(data,correctionInformation);
    }
    private static DataBlock[] testDeinterleave(byte[] data, ErrorCorrectionInformation correctionInformation){
        return DataDestructurer.deinterleave(data,correctionInformation);
    }
    private static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation correctionInformation){
        return  DataDestructurer.join(blocks,correctionInformation);
    }
}
