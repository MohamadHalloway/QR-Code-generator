package jpp.qrcode.decode;

import jpp.qrcode.DataBlock;
import jpp.qrcode.ErrorCorrectionGroup;
import jpp.qrcode.ErrorCorrectionInformation;
import jpp.qrcode.reedsolomon.ReedSolomon;
import jpp.qrcode.reedsolomon.ReedSolomonException;

public class DataDestructurer {
	static int n;
	public static byte[] join(DataBlock[] blocks, ErrorCorrectionInformation errorCorrectionInformation) throws QRDecodeException {
		try {
			n = 0;
			for (DataBlock block: blocks){
				ReedSolomon.correct(block.dataBytes(),block.correctionBytes());
				n++;
			}
		}catch (Exception e){
			throw new QRDecodeException("Fehler beim Dekodieren von Block" + n);
		}
		byte[] res = new byte[errorCorrectionInformation.totalDataByteCount()];
		int index = 0;
		for (DataBlock block: blocks){
			for (byte info: block.dataBytes()){
				res[index] = info;
				index++;
			}
		}
		return res;
	}
	
	public static DataBlock[] deinterleave(byte[] data, ErrorCorrectionInformation ecInformation) {
	    if (data == null || data.length == 0){
	        throw new IllegalArgumentException("data in deinterleave is empty ");
        }
		DataBlock[] result = null;
		ErrorCorrectionGroup[] ecGroup = ecInformation.correctionGroups();
	    switch (ecGroup.length){
			case 1:
				int anzahlBloecke = ecGroup[0].blockCount();
				int anzahlData = ecGroup[0].dataByteCount();
				int anzahlCorrectionBytes = ecInformation.correctionBytesPerBlock();
				result = new DataBlock[anzahlBloecke];
				int index = 0;
				byte[][] dataBytes = new byte[anzahlBloecke][ecInformation.lowerDataByteCount()];
				for (int i = 0; i < anzahlData * anzahlBloecke; i += anzahlBloecke) {
					for (int j = 0; j < anzahlBloecke; j++) {
						dataBytes[j][index] = data[i+j];
					}
					index++;
				}
				index = 0;
				byte[][] correctionBytes = new byte[anzahlBloecke][anzahlCorrectionBytes];
				for (int i = anzahlData  * anzahlBloecke; i < data.length; i += anzahlBloecke) {
					for (int j = 0; j < anzahlBloecke; j++) {
						correctionBytes[j][index] = data[i+j];
					}
					index++;
				}
				for (int i = 0; i < anzahlBloecke; i++) {
					result[i] = new DataBlock(dataBytes[i],correctionBytes[i]);
				}
//				if (anzahlBloecke == 2){
//					int index = 0;
//					for (int i = 0; i < ecInformation.totalDataByteCount(); i++) {
//						byte[] blockData = new byte[ecInformation.totalBlockCount()];
//						for (int j = 0; j < data.length/anzahlBloecke; j++) {
//							blockData[j] = data[index];
//						}
//						byte[] correctionBytes= ReedSolomon.calculateCorrectionBytes(blockData,ecInformation.correctionBytesPerBlock());
//						DataBlock dataBlock = new DataBlock(blockData,correctionBytes);
//						result[i] = dataBlock;
//					}
//				}
				break;
			case 2:
				break;
		}


		return result;
	}
	
	public static byte[] destructure(byte[] data, ErrorCorrectionInformation ecBlocks){
		if (data.length != ecBlocks.totalDataByteCount()){
		    throw new IllegalArgumentException("anzhal der Bytes ungleich der Bytes in data");
        }
		DataBlock[] dataBlocks = deinterleave(data,ecBlocks);
		byte[] res = join(dataBlocks,ecBlocks);
		return res;
	}
}
