package jpp.qrcode.decode;

import jpp.qrcode.*;

public class DataDecoder {
	public static Encoding readEncoding(byte[] bytes) {
		int bits = bytes[0] & 0xF0;
		Encoding result = Encoding.fromBits(bits);
		return result;
	}
	
	public static int readCharacterCount(byte[] bytes, int count) {
		int bits = bytes[0] & 0xF;
		if (count == 8){
			bits = (bits << 4) | (bytes[1] >> 4);
		}
		else {
			bits = (bits << 14) | (bytes[1] << 4) | (bytes[2] >> 4);
		}
		return bits;
	}
	
	public static String decodeToString(byte[] bytes, Version version, ErrorCorrection errorCorrection) {
		if (version.totalByteCount() != Version.forDataBytesCount(bytes.length,errorCorrection).totalByteCount()){
			throw new IllegalArgumentException("die Byteanzahl passt nicht zur Datenbyteanzahl dieser Version mit dem gegebenen Fehlerkorrekturlevel");
		}
		int cci = (version.number() > 10) ? 16 : 8;
		if (!readEncoding(bytes).equals(Encoding.BYTE) || readCharacterCount(bytes,8) > bytes.length){
			throw new QRCodeException("Encoding is not BYTE");
		}
		return "";
	}
}
